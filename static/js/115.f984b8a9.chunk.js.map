{"version":3,"file":"static/js/115.f984b8a9.chunk.js","mappings":"sQAMe,SAASA,IACtB,IAAAC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAA0CL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAEhCG,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAK,IAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAELC,EAAAA,EAAAA,IAAU,qDAADC,OACuBC,EAAAA,EAAM,WAAAD,OAAUjB,EAAW,gCAChF,KAAD,EAFKY,EAAQC,EAAAM,KAGdd,EAAiBO,EAASQ,KAAKC,SAC/BC,OAAOC,QAAQC,aAAa,KAAM,GAAG,iBAADP,OAAmBjB,IAAea,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAEtEa,QAAQC,MAAM,gCAA+Bd,EAAAY,IAAS,yBAAAZ,EAAAe,OAAA,GAAAlB,EAAA,kBAEzD,gBAViBmB,GAAA,OAAAtB,EAAAuB,MAAA,KAAAC,UAAA,KAgBlB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBACJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,aACZC,MAAOrC,EACPsC,SAAU,SAAAC,GAAC,OAAItC,EAAesC,EAAEC,OAAOH,MAAM,KAE/CH,EAAAA,EAAAA,KAAA,UACEO,QAAS,WACPnC,IAdNL,EAAe,GAgBX,EAAEgC,SACH,YAGDC,EAAAA,EAAAA,KAAA,MAAAD,SACG7B,EAAcsC,KAAI,SAAAC,GAAK,OACtBT,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACC,GAAE,WAAA5B,OAAa0B,EAAMG,IAAKb,SAAEU,EAAMI,SADjCJ,EAAMG,GAEV,QAKf,C","sources":["components/Movies/Movies.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { apiKey } from 'API/themoviedb';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nexport default function Movies() {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const searchMovies = async query => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${searchQuery}&include_adult=false&page=1`\r\n      );\r\n      setSearchResults(response.data.results);\r\n      window.history.replaceState(null, '', `/movies?query=${searchQuery}`);\r\n    } catch (error) {\r\n      console.error('Error while searching movies:', error);\r\n    }\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setSearchQuery('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Search for movies</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter text\"\r\n        value={searchQuery}\r\n        onChange={e => setSearchQuery(e.target.value)}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          searchMovies();\r\n          clearSearch();\r\n        }}\r\n      >\r\n        Search\r\n      </button>\r\n      <ul>\r\n        {searchResults.map(movie => (\r\n          <li key={movie.id}>\r\n            <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovies.propTypes = {\r\n  searchResults: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};"],"names":["Movies","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_useState3","_useState4","searchResults","setSearchResults","searchMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","query","response","_context","prev","next","axios","concat","apiKey","sent","data","results","window","history","replaceState","t0","console","error","stop","_x","apply","arguments","_jsxs","children","_jsx","type","placeholder","value","onChange","e","target","onClick","map","movie","Link","to","id","title"],"sourceRoot":""}